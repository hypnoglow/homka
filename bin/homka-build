#!/bin/bash
#
# This is a simple build tool.
################################################################################

_SELF_HOME=$( dirname $( dirname $( readlink -e "${BASH_SOURCE[0]}" ) ) )

declare -i _ERROR_VARIABLE_NOT_DEFINED=64
declare -i _ERROR_VARIABLE_BAD_VALUE=65

# Include libraries
. ${_SELF_HOME}/lib/std.sh
. ${_SELF_HOME}/lib/io.sh
. ${_SELF_HOME}/lib/str.sh

main() {
    declare -g build=""
    declare -g branch=""

    process_args "$@"
    check_args

    io::read_conf "$config"
    check_variables_defined

    if [[ "${tmp_dir}" =~ ^/tmp.?$ ]]; then
        tmp_dir="${tmp_dir}/${_SELF}"
    fi

    prepare_repo
    exec_pre_command
    make_a_build
    store_build
}

# Ensures that all necessary variables are passed as arguments.
check_args() {
    if [ -z "${build}" ]; then
        _error "Build is not specified."
        exit 1
    fi

    if [ -z "${config}" ] ; then
        _error "Config file is not specified!"
        exit 1
    fi
}

# Ensures that all necessary variables are defined in config or as arguments.
check_variables_defined() {
    local variables=(
        tmp_dir
        builds_store
        tag_prefix
        clean
        project
        repo
        includes
    )
    local variables
    local error=false

    for variable in ${variables[@]}; do
        if [ -z "${!variable}" ]; then
            error=true
            _error "${variable} is not defined."
        fi
    done

    if $error; then
        exit ${_ERROR_VARIABLE_NOT_DEFINED}
    fi

    # Just to be sure 'clean' is either 'yes' or 'no'
    if [ "$clean" != "yes" ] && [ "$clean" != "no" ] ; then
        _error "Unknown 'clean' value: $clean"
        exit ${_ERROR_VARIABLE_BAD_VALUE}
    fi
}

# Arguments handler.
process_args() {
    while [[ $# > 0 ]] ; do
        case $1 in
            -h|--help)
                print_usage
                exit 0
            ;;
            -c|--clean)
                clean="yes"
            ;;
            -n|--build-number)
                build="$2"
                shift
            ;;
            -b|--branch)
                branch="$2"
                shift
            ;;
            -*)
                _error "Unknown argument $param"
                exit 1
            ;;
            *)
                config=$1
                break
            ;;
        esac
        shift
    done
}

print_usage() {
    cat <<EOF
Usage:
    $_CALLER build -b <N> <path..>

-n|--build-number   Build number, e.g. "-n 104"
-b|--branch         Branch name, e.g. "feature-new-button"
<path..>            Path to your project's config.conf
                    See \`template.conf\` for further details.

$_SELF version $_VERSION
EOF
}

# Prepares repository for package building.
# If clean repo is need, then this function does `git clone`.
# Otherwise it just does `git pull`.
prepare_repo() {
    local repo_dir="${tmp_dir}/repos/${project}"
    if [ "$clean" = "yes" ] || [ ! -e "$repo_dir" ] ; then
        if [ -e "$repo_dir" ] ; then
            rm -rf "$repo_dir"
        fi

        _info "Clone repo $repo to $repo_dir"
        git clone -q "$repo" "$repo_dir"
        _expect "Cannot clone repo $repo"

        cd "$repo_dir"
    else
        cd "$repo_dir"
        git checkout -q master

        _info "Pull latest changes from $repo"
        git pull -q
    fi
}

exec_pre_command() {
    [ -z "$pre_command" ] && return 0

    local repo_dir="${tmp_dir}/repos/${project}"

    _info "Running pre-build command '$pre_command'"
    cd "$repo_dir"
    ${pre_command}

    _expect "Pre-build command '$pre_command' failed."
}

# Checkout build tag in repository and make tarball fron necessary files.
make_a_build() {
    declare -g build_tag="${tag_prefix}${build}"
    local ref="${build_tag}"

    if [ -n "${branch}" ]; then
        ref="${branch}"
    fi

    git checkout -q "${ref}"
    _expect "Cannot checkout ${ref}: pathspec not found."

    local repo_dir="${tmp_dir}/repos/${project}"
    local builds_tmp_dir="${tmp_dir}/builds/${project}"
    declare -g build_file="${project}@${build_tag}.tar.gz"

    mkdir -p "${builds_tmp_dir}"
    _expect "Cannot create directory ${builds_tmp_dir}"

    _info "Pack up stuff into ${builds_tmp_dir}/${build_file}"
    tar -C "$repo_dir" -zcf "${builds_tmp_dir}/${build_file}" $includes
    _expect "Cannot create tarball."
}

store_build() {
    # TODO: check permissions
    mkdir -p "${builds_store}/${project}"

    mv "${tmp_dir}/builds/${project}/${build_file}" "${builds_store}/${project}/"
    _expect "Cannot move ${build_file} to ${builds_store}/${project}"

    if [ -n "${branch}" ]; then
        _info "Set build tag \"${build_tag}\" in repo ${repo}"
        if git tag -l | egrep -q "^$(str::ere_quote "${build_tag}")$"; then
            git tag -d "${build_tag}"
            git push -q --delete origin "${build_tag}"
        fi

        git tag "${build_tag}"
        git push origin "${build_tag}"
    fi

    _info "Build is ready: ${builds_store}/${project}/${build_file}"
}

main "$@"
exit 0
